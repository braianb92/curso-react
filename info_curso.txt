horacio.estevez@gmail.com
https://github.com/HoracioGutierrez/react-accenture
https://github.com/rus0000/jsinheritance
video: The definitive guide to object-oriented javascript.
video: source decoded.
cursos: https://tinyurl.com/y5cwoj8y
cursos: cursosmegaup.bid
-----------------------------------------------------

npm i -g create-react-app (instalacion global del paquete base)
create-react-app <nombreProyecto>(creacion del proyecto, no admite mayus)


-----------------------
*no hay 2-way data-binding
*Librerias React: 1-react 2-react-DOM
*La variable React(import) siempre presente para los exports/imports
*Todos los componentes de React son funciones en mayuscula:
*Siempre retornar otro React.Component, un DOMElement o String;

	function App(){return "Hola Mundo"}
	let App= () => {return "Hola Mundo"}
	let App= () => "Hola Mundo"


*Un componente ejecutado se escribe en forma JSX:
	App() === <App/> 

*Funcion tipo class --> class <nombreFuncion> extends React.Component
Estas funciones siempre tienen un metodo render el cual retorno los elementos.

*Un componente de tipo clase puede tener estado(state) el cual
es creado en su constructor. Este estado puede ser compartido a todos sus componentes
hijos. Cada vez que el estado cambia, este y todos los componentes que lo usen, 
van a volver a ejecutar su metedo render

*Cualquier componente de React puede recibir parametros
(props), usualmente son el state de un componente padre y se escriben
en JSX como atributos de HTML:
	<App required /> === App({required:true})
	<App test="hola" /> === App({test:"hola"})
	<App fn={()=>{}} /> === App({fn:()=>{}})

*El estado de un componente no puede ser modificado por asignacion
de variable sino a traves de thi.setState({}),en donde describimos
como deberia verse el proximo estado de la aplicacion.

*CONTEXTO: Hace referencia al objeto que contiene a la funcion, por lo
general y esta en la palabra reservada "this". No es estatico, es decir que 
puede cambiar dependiendo la ejecucion o el programador.
	function foo(){
		console.log(this)
	}
	foo() //devuelve window{}

//CALL - APPLY - BIND - NEW

*CICLO DE VIDA DE UN COMPONENTE: (metodos de ciclo de vida son funciones de clase presstablecidas en React
y solo funcionan para componentes de tipo clase, no para componentes funcionales. Se separan en tres grupos):
-Mount-->
	constructor : inicio del comp. Aca creamos el estado, bindeamos metedos
	y hacemos configs extra.

	componentWillMount: "promise"

	render: UI del comp en JSX.

	componentDidMount: Subscripciones a APIs REST y/o DB.

-Update-->
	shouldComponentUpdate: Dado que cada componente se actualiza
	por cambios de proprs, recepcion de props y/o cambio de
	estado, este metodos es ideal para cuando recibimos
	nuevos props que son iguales a los que ya teniamos. (optimizacion retorna bool).

	render: UI del comp en JSX.

-Unmount-->
	componentWillUnount: opuesto componentDidMount. Removes
	eventos, timers y Subscripciones.

*REACT REDUX:
	Es una libreria para implementar el patron de pub/sub en cualquier
	aplicacion de JS. Se se√†ra en dos : redux y react-reduc, siendo la ultima la que nos permite
	conectar redux con una aplicacion de React.
	"npm i -S redux react-redux"

	-Store: es analogo al state de un componente pero este
	no se crea directo sino que con un reducer.

	-Reducer: Es una funcion pura que toma dos parametros:
	el estado inicial de la app (o anterior) y el action

	-action: Es una funcion pura que puede vivir en cualquier archivo.
	No necesitamos anda para crearla pero si es obligacion:
		1.Que haya retorno de tipo Object.
		2.Toda operacion entre el inicio del stack al retorno sea sincronica.
		3.Usualmente el objeto que retorna un action suele tener como minimo la propiedad "type".

	REDUX IMPLEMENTACION
		1) Crear en algun archivo un store: Para eso necesitamos
		la funcion createStore de "redux". Esta toma como parametrosun reducer.
		2)Crear en algun archivo un reducer : Para eso no se necesita nada,
		solo exportar una funcion que tome dos parametros y siempre retorne algo
		dentro de un switch.

Conectar la app con redux
	1) incluir la parte de la app que nos interesa
	conectar a redux con el componente Provider de "react-redux".
	2)pasarle como prop al Provider el store.

Conectar componentes individuales con el store
	-Consumir el Store: necesitamos la funcion connect de "react-redux",
	ejecutarla y pasarle el componente que queremos conectar. Ademas
	usamos el primer parametro de connect el cual es una funcion. Esta
	funcion recibe una copia del store y lo que retorne, va a formar parte
	de los props del componente que estemos conectando.


-Despachar una accion:necesitamos la funcion connect de "react-redux",
	ejecutarla y pasarle el componente que queremos conectar.Ademas
	usamos el primer parametro de connect el cual es una funcion. Esta
	funcion recibe una copia de la funcion para despachar(llamada dispatch)
	y lo que retorne, va a formar parte de los props del 
	componente que estemos conectando. Creo todas las acciones que necesito 
	en algun lugar y las importe en el componente donde estoy trabajando.
	Fusiono mi propia accion con la funcion de "dispatch" utilizando 
	"bindActionCreators" de "redux".