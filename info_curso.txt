horacio.estevez@gmail.com
https://github.com/HoracioGutierrez/react-accenture
video: The definitive guide to object-oriented javascript.
-----------------------------------------------------

npm i -g create-react-app (instalacion global del paquete base)
create-react-app <nombreProyecto>(creacion del proyecto, no admite mayus)


-----------------------
*no hay 2-way data-binding
*Librerias React: 1-react 2-react-DOM
*La variable React(import) siempre presente para los exports/imports
*Todos los componentes de React son funciones en mayuscula:
*Siempre retornar otro React.Component, un DOMElement o String;

	function App(){return "Hola Mundo"}
	let App= () => {return "Hola Mundo"}
	let App= () => "Hola Mundo"


*Un componente ejecutado se escribe en forma JSX:
	App() === <App/> 

*Funcion tipo class --> class <nombreFuncion> extends React.Component
Estas funciones siempre tienen un metodo render el cual retorno los elementos.

*Un componente de tipo clase puede tener estado(state) el cual
es creado en su constructor. Este estado puede ser compartido a todos sus componentes
hijos. Cada vez que el estado cambia, este y todos los componentes que lo usen, 
van a volver a ejecutar su metedo render

*Cualquier componente de React puede recibir parametros
(props), usualmente son el state de un componente padre y se escriben
en JSX como atributos de HTML:
	<App required /> === App({required:true})
	<App test="hola" /> === App({test:"hola"})
	<App fn={()=>{}} /> === App({fn:()=>{}})

*El estado de un componente no puede ser modificado por asignacion
de variable sino a traves de thi.setState({}),en donde describimos
como deberia verse el proximo estado de la aplicacion.

*CONTEXTO: Hace referencia al objeto que contiene a la funcion, por lo
general y esta en la palabra reservada "this". No es estatico, es decir que 
puede cambiar dependiendo la ejecucion o el programador.
	function foo(){
		console.log(this)
	}
	foo() //devuelve window{}

//CALL - APPLY - BIND - NEW

*CICLO DE VIDA DE UN COMPONENTE: (metodos de ciclo de vida son funciones de clase presstablecidas en React
y solo funcionan para componentes de tipo clase, no para componentes funcionales. Se separan en tres grupos):
-Mount-->
	constructor : inicio del comp. Aca creamos el estado, bindeamos metedos
	y hacemos configs extra.

	componentWillMount: "promise"

	render: UI del comp en JSX.

	componentDidMount: Subscripciones a APIs REST y/o DB.

-Update-->
	shouldComponentUpdate: Dado que cada componente se actualiza
	por cambios de proprs, recepcion de props y/o cambio de
	estado, este metodos es ideal para cuando recibimos
	nuevos props que son iguales a los que ya teniamos. (optimizacion retorna bool).

	render: UI del comp en JSX.

-Unmount-->
	componentWillUnount: opuesto componentDidMount. Removes
	eventos, timers y Subscripciones.

*COMPONENTES CONTROLADOS:
